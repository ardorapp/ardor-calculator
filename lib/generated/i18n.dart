import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get app_name => "Ardor Calculator";
  String get calBlockChain_name => "BlockChain";
  String get calFinancial_name => "Financial";
  String get calGeneral_name => "General";
  String get calMathematical_name => "Mathematical";
  String get formula_warning_can_not_input_null => "Can not input null";
  String get formula_warning_logic_illegal_can_not_add_formula => "Formula logic illegal: can't add formula";
  String get formula_warning_logic_illegal_can_not_be_brackets => "Formula logic illegal: It can't be )";
  String get formula_warning_logic_illegal_can_not_match_brackets => "Formula logic illegal: Can't match (";
  String get formula_warning_logic_illegal_formula_is_null => "Formula logic illegal: formula is null";
  String get formula_warning_memory_cache_is_empty => "Memory cache is empty.";
  String get formula_warning_not_a_legitimate_number => "It's not a legitimate number";
  String get formula_warning_nothing_can_be_deleted => "Nothing can be deleted！";
  String get formula_warning_nothing_to_memory_cache => "There is nothing to memory cache.";
  String get home_tips_check_failure => "Check failure.";
  String get tips_under_development => "Under development, stay tuned.";
  String formula_warning_cannot_add_memoryCache_to_currentNumber(String memoryCache, String currentNumber) => "Cannot add $memoryCache to the end of $currentNumber.";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get formula_warning_can_not_input_null => "输入不能为空。";
  @override
  String get calGeneral_name => "通用";
  @override
  String get home_tips_check_failure => "校验失败。";
  @override
  String get calMathematical_name => "科学";
  @override
  String get formula_warning_not_a_legitimate_number => "非法数字。";
  @override
  String get formula_warning_logic_illegal_can_not_match_brackets => "公式逻辑错误:: 不能比配 (";
  @override
  String get formula_warning_memory_cache_is_empty => "缓存已为空";
  @override
  String get app_name => "Ardor 计算器";
  @override
  String get calFinancial_name => "金融";
  @override
  String get formula_warning_nothing_can_be_deleted => "没有需要删除的信息。";
  @override
  String get formula_warning_logic_illegal_can_not_add_formula => "公式逻辑错误:  不能增加公式";
  @override
  String get formula_warning_nothing_to_memory_cache => "没有需要清空的缓存。";
  @override
  String get formula_warning_logic_illegal_can_not_be_brackets => "公式逻辑错误:  不能输入 )";
  @override
  String get tips_under_development => "正在开发中，敬请期待。";
  @override
  String get formula_warning_logic_illegal_formula_is_null => "公式逻辑错误: 公式为空";
  @override
  String get calBlockChain_name => "区块链";
  @override
  String formula_warning_cannot_add_memoryCache_to_currentNumber(String memoryCache, String currentNumber) => "不能将缓存 $memoryCache 添加到数字 $currentNumber 的末尾。";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh_CN":
          S.current = const $zh_CN();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
